var search_data = {"index":{"searchIndex":["fmgapi","add_adom()","add_device()","add_group()","add_policy_package()","assign_global_policy()","create_script()","delete_adom()","delete_config_rev()","delete_device()","delete_group()","delete_script()","edit_adom()","edit_group_membership()","edit_policy_package()","get_adom_by_name()","get_adom_by_oid()","get_adom_list()","get_config()","get_config_revision_history()","get_device()","get_device_license_list()","get_device_list()","get_device_vdom_list()","get_faz_archive()","get_faz_config()","get_faz_generated_report()","get_fmg_config()","get_group()","get_group_list()","get_instlog()","get_package_list()","get_script()","get_script_log()","get_script_log_summary()","get_system_status()","get_task_detail()","import_policy()","install_config()","list_faz_generated_reports()","list_revision_id()","new()","remove_faz_archive()","retrieve_config()","revert_config()","run_faz_report()","run_script()","search_faz_log()","set_faz_config()","set_fmg_config()"],"longSearchIndex":["fmgapi","fmgapi#add_adom()","fmgapi#add_device()","fmgapi#add_group()","fmgapi#add_policy_package()","fmgapi#assign_global_policy()","fmgapi#create_script()","fmgapi#delete_adom()","fmgapi#delete_config_rev()","fmgapi#delete_device()","fmgapi#delete_group()","fmgapi#delete_script()","fmgapi#edit_adom()","fmgapi#edit_group_membership()","fmgapi#edit_policy_package()","fmgapi#get_adom_by_name()","fmgapi#get_adom_by_oid()","fmgapi#get_adom_list()","fmgapi#get_config()","fmgapi#get_config_revision_history()","fmgapi#get_device()","fmgapi#get_device_license_list()","fmgapi#get_device_list()","fmgapi#get_device_vdom_list()","fmgapi#get_faz_archive()","fmgapi#get_faz_config()","fmgapi#get_faz_generated_report()","fmgapi#get_fmg_config()","fmgapi#get_group()","fmgapi#get_group_list()","fmgapi#get_instlog()","fmgapi#get_package_list()","fmgapi#get_script()","fmgapi#get_script_log()","fmgapi#get_script_log_summary()","fmgapi#get_system_status()","fmgapi#get_task_detail()","fmgapi#import_policy()","fmgapi#install_config()","fmgapi#list_faz_generated_reports()","fmgapi#list_revision_id()","fmgapi::new()","fmgapi#remove_faz_archive()","fmgapi#retrieve_config()","fmgapi#revert_config()","fmgapi#run_faz_report()","fmgapi#run_script()","fmgapi#search_faz_log()","fmgapi#set_faz_config()","fmgapi#set_fmg_config()"],"info":[["FmgApi","","FmgApi.html","","<p>Version &mdash; 0.9\n<p>Tested with &mdash; FMG/FAZ 5.0.7\n<p>Tested with &mdash; Ruby 1.9.3 and Ruby 2.0.0\n"],["add_adom","FmgApi","FmgApi.html#method-i-add_adom","(opts = {}, devices=false)","<p>add_adom Returns Hash (with FMG error_code and error_msg, when successful)\nor Error (if not successful) …\n"],["add_device","FmgApi","FmgApi.html#method-i-add_device","(opts = {})","<p>add_device Returns String (string contains taskID of addDevice task, you\ncan lookup the task to get results) …\n"],["add_group","FmgApi","FmgApi.html#method-i-add_group","(opts = {})","<p>add_group Returns Hash with API error hash (if successful) or returns\nObject Type Error likely a RunTimeError …\n"],["add_policy_package","FmgApi","FmgApi.html#method-i-add_policy_package","(opts = {}, install_targets=false)","<p>add_policy_package Returns NoriStringWithAttributes (string contains OID of\npackage that operation was …\n"],["assign_global_policy","FmgApi","FmgApi.html#method-i-assign_global_policy","(opts = {}, targets=false)","<p>assign_global_policy Returns Nori::StringWithAttributes (string contains\ntask ID of process)\n<p>Assigns a …\n"],["create_script","FmgApi","FmgApi.html#method-i-create_script","(opts = {})","<p>create_script Returns Nori::StringWithAttributes (string contains 0 for\nsuccess or 1 for failed)\n<p>Creates …\n"],["delete_adom","FmgApi","FmgApi.html#method-i-delete_adom","(opts = {})","<p>delete_adom Returns Hash (if hash is return object then it was executed\nsuccessfully)\n<p>Deletes specified …\n"],["delete_config_rev","FmgApi","FmgApi.html#method-i-delete_config_rev","(opts = {})","<p>delete_config_rev Returns Hash (if hash is return object then it was\nexecuted successfully)\n<p>Deletes specified …\n"],["delete_device","FmgApi","FmgApi.html#method-i-delete_device","(opts = {})","<p>delete_device Nori::StringWithAttributes (string contains taskID of fmg\ndelete device process. Must get …\n"],["delete_group","FmgApi","FmgApi.html#method-i-delete_group","(opts = {})","<p>delete_group Returns Hash (if object type of Hash is returned then executed\nsuccessfully)\n<p>Deletes specified …\n"],["delete_script","FmgApi","FmgApi.html#method-i-delete_script","(opts = {})","<p>delete_script\n<p>Deletes specified script\n<p><code>Usage:</code>\n"],["edit_adom","FmgApi","FmgApi.html#method-i-edit_adom","(opts = {}, devices=false, meta=false)","<p>edit_adom Returns Hash (with FMG error_code and error_msg when successful)\nor RunTimeError (if not successful) …\n"],["edit_group_membership","FmgApi","FmgApi.html#method-i-edit_group_membership","(opts = {})","<p>edit_group_membership Returns\n<p>Retrieves ADOM info for a specified ADOM name and returns a hash of \nattributes …\n"],["edit_policy_package","FmgApi","FmgApi.html#method-i-edit_policy_package","(opts = {}, install_targets=false)",""],["get_adom_by_name","FmgApi","FmgApi.html#method-i-get_adom_by_name","(opts = {})","<p>get_adom_by_name Returns Hash\n<p>Retrieves ADOM info for a specified ADOM name and returns a hash of \nattributes …\n"],["get_adom_by_oid","FmgApi","FmgApi.html#method-i-get_adom_by_oid","(opts = {})","<p>get_adom_by_oid Returns Hash\n<p>Retrieves VDOM info for a specified VDOM ID and returns a hash of VDOM\nattributes …\n"],["get_adom_list","FmgApi","FmgApi.html#method-i-get_adom_list","()","<p>get_adom_list Returns Array of Hashes (unless not in ADOM mode then just\nsingle Hash)\n<p>Retrieves ADOM details …\n"],["get_config","FmgApi","FmgApi.html#method-i-get_config","(opts={})","<p>get_config Returns Hash\n<p>Retrieves a specific configuration revision\n<p><code>Usage:</code>\n"],["get_config_revision_history","FmgApi","FmgApi.html#method-i-get_config_revision_history","(opts={})","<p>get_config_revision_history Returns Hash or Array of Hashes (if multiple\nresults are found then returns …\n"],["get_device","FmgApi","FmgApi.html#method-i-get_device","(opts={})","<p>get_device Returns Hash\n<p>Retrieves a list of vdoms or with arguments a vdom for a specific device id\nor …\n"],["get_device_license_list","FmgApi","FmgApi.html#method-i-get_device_license_list","()","<p>get_device_license_list Returns Hash or Array of Hashes (if multiple\nresults are found then returns  …\n"],["get_device_list","FmgApi","FmgApi.html#method-i-get_device_list","(opts={})","<p>get_device_list Returns Hash or Array of Hashes (if multiple results are\nfound then returns Array of …\n"],["get_device_vdom_list","FmgApi","FmgApi.html#method-i-get_device_vdom_list","(opts={})","<p>get_device_vdom_list Returns Hash or Array of Hashes (if multiple results\nare found then returns Array …\n"],["get_faz_archive","FmgApi","FmgApi.html#method-i-get_faz_archive","(opts={})","<p>get_faz_archive Returns UU64 encoded String\n<p>Retrieves specified archive file.  (File name is required …\n"],["get_faz_config","FmgApi","FmgApi.html#method-i-get_faz_config","()","<p>get_faz_config Returns Nori::StringWithAttributes   (resulting string\ncontains configuration)\n<p>Retrieves …\n"],["get_faz_generated_report","FmgApi","FmgApi.html#method-i-get_faz_generated_report","(opts={})","<p>get_faz_generated_report Returns UU64 encoded String\n\n<pre>**************** Not Working ************************</pre>\n"],["get_fmg_config","FmgApi","FmgApi.html#method-i-get_fmg_config","()",""],["get_group","FmgApi","FmgApi.html#method-i-get_group","(opts={})","<p>get_groups Returns Hash or Array of Hashes (if multiple results are found\nthen returns Array of Hashes …\n"],["get_group_list","FmgApi","FmgApi.html#method-i-get_group_list","(opts={})","<p>get_group_list Returns Hash or Array of Hashes (if multiple results are\nfound then returns Array of  …\n"],["get_instlog","FmgApi","FmgApi.html#method-i-get_instlog","(opts={})","<p>get_instlog Returns Hash or Array of Hashes (if multiple results are found\nthen returns Array of Hashes …\n"],["get_package_list","FmgApi","FmgApi.html#method-i-get_package_list","(opts={})","<p>get_package_list Returns Hash or Array of Hashes (if multiple results are\nfound then returns Array of …\n"],["get_script","FmgApi","FmgApi.html#method-i-get_script","(opts={})","<p>get_script (Returns Hash)\n<p>Retrieves script details.\n<p><code>Usage:</code>\n"],["get_script_log","FmgApi","FmgApi.html#method-i-get_script_log","(opts={})","<p>get_script_log Returns Hash\n<p>Retrieves script log\n<p><code>Usage:</code>\n"],["get_script_log_summary","FmgApi","FmgApi.html#method-i-get_script_log_summary","(opts={})","<p>get_script_log_summary Returns Hash\n<p>Retrieves summary of executed scripts for a specific device\n<p><code>Usage:</code> ...\n"],["get_system_status","FmgApi","FmgApi.html#method-i-get_system_status","()","<p>get_system_status Returns Hash\n<p>Retrieves system status as has containing system variables and values. …\n"],["get_task_detail","FmgApi","FmgApi.html#method-i-get_task_detail","(opts={})","<p>get_task_detail Returns Hash\n<p>Retrieves details of a task\n<p><code>Usage:</code>\n"],["import_policy","FmgApi","FmgApi.html#method-i-import_policy","(opts={})","<p>import_policy Returns Nori::StringWithAttributes (returned string contains\ndetails of import if success) …\n"],["install_config","FmgApi","FmgApi.html#method-i-install_config","(opts={})","<p>install_conifg Returns Nori::StringWithAttributes (string contains taskID\nof associated task)\n<p>Installs …\n"],["list_faz_generated_reports","FmgApi","FmgApi.html#method-i-list_faz_generated_reports","(opts={})","<p>list_faz_generated_reports Returns Hash or Array of Hashes (if multiple\nresults are found then returns …\n"],["list_revision_id","FmgApi","FmgApi.html#method-i-list_revision_id","(opts={})","<p>list_revision_id Returns: Nori::StringWithAttributes (string contains\nrevisionID requested)\n<p>Retrieves …\n"],["new","FmgApi","FmgApi.html#method-c-new","(wsdl, endpoint, namespace, userid, passwd)",""],["remove_faz_archive","FmgApi","FmgApi.html#method-i-remove_faz_archive","(opts={})","<p>remove_faz_archive Returns: Hash  (returned result contains error_code and\n\n<pre>error_message hash keys.  :error_code=0 ...</pre>\n"],["retrieve_config","FmgApi","FmgApi.html#method-i-retrieve_config","(opts={})","<p>retrieve_config Returns: Nori::StringWithAttributes (Returned string\ncontains the FortiManager task  …\n"],["revert_config","FmgApi","FmgApi.html#method-i-revert_config","(opts={})","<p>revert config Returns Hash  (Returned result contains error_code and\nerror_message hash keys. :error_code=0 …\n"],["run_faz_report","FmgApi","FmgApi.html#method-i-run_faz_report","(opts = {})","<p>run_faz_report Returns Hash   (Returned result contains error_code and\nerror_message hash keys.\n\n<pre>:error_code=0 ...</pre>\n"],["run_script","FmgApi","FmgApi.html#method-i-run_script","(opts={})","<p>run_script Returns: Nori::StringWithAttributes  (returned value is task ID\nfor script process)\n<p>Executes …\n"],["search_faz_log","FmgApi","FmgApi.html#method-i-search_faz_log","(opts={})","<p>search_faz_log Returns Hash (for single log) or Array of Hashes (for\nmultiple logs)\n<p><code>Usage:</code>\n\n<pre>search_faz_log({:device_name ...</pre>\n"],["set_faz_config","FmgApi","FmgApi.html#method-i-set_faz_config","(opts={})","<p>set_faz_config Returns NoriStringWithAttributes  (returns string containing\ntask ID)\n<p>Sets configuration …\n"],["set_fmg_config","FmgApi","FmgApi.html#method-i-set_fmg_config","(opts={})",""]]}}